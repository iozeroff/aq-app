# Get country code for visualization AQI parameters.
aqi_country <- args$aqi_country %>%
countrycode::countrycode(origin = "country.name",
destination = "iso2c")
runApp()
runApp()
aqi_country[1]
aqi_country[[1]]
runApp()
runApp()
?radioButtons
runApp()
runApp()
?openair::calendarPlot
edit.file("README.md")
edit("README.md")
file.edit("README.md")
runApp()
runApp()
runApp()
runApp()
runApp()
pas <- pas_load(datestamp = format(Sys.Date(), "%Y%m%d"),
timezone = Sys.timezone())
?pas_load
rm(pas)
pas <- pas_load(datestamp = format(Sys.Date(), "%Y%m%d"),
timezone = Sys.timezone())
pas <- pas_load(datestamp = format(Sys.Date(), "%Y%m%d"))
runApp()
Sys.Date()
as.Date(Sys.time())
runApp()
View(pas)
pas <- pas_createNew(datestamp = format(Sys.Date(), "%Y%m%d"),
timezone = Sys.timezone())
?pas_createNew
pas <- pas_createNew(countryCodes = c("US"))
library(microbenchmark)
microbenchmark({
pas <- pas_createNew(countryCodes = c("US"))},
times = 5)
runApp()
runApp()
View(workweek_weeknd_pmPlot)
source('C:/Users/iozeroff/Data-Science/ophealthyair/R/workweek_weeknd_pmPlot.R', encoding = 'UTF-8', echo=TRUE)
runApp()
runApp()
runApp()
View(sensor_pollutionRose())
View(sensor_pollutionRose)
?openair::pollutionRose
runApp()
runApp()
?worldmet::importNOAA
runApp()
runApp()
runApp()
?lubridate::year
runApp()
runApp()
runApp()
?is.empty.model
?modalDialog
?showModal
runApp()
?renderUI
?renderText
runApp()
runApp()
?stringi::stri_split
?stringr::str_split
readLines("intro.txt")
rawText <- readLines('intro.txt')
# Intro Text
rawText <- readLines('intro.txt') # get raw text
# split the text into a list of character vectors
#   Each element in the list contains one line
splitText <- stringr::str_split(str = rawText, regex = '\\n')
# split the text into a list of character vectors
#   Each element in the list contains one line
splitText <- stringr::str_split(rawText,  pattern = '\\n')
print(splitText)
print(rawText)
# wrap a paragraph tag around each element in the list
replacedText <- lapply(splitText, p)
print(replacedText)
# Intro Text
# get raw text
introText <- readLines('intro.txt') %>%
stringr::str_split(rawText,  pattern = '\\n') %>%
# wrap a paragraph tag around each element in the list
replacedText <- purrr::map(p)
# Intro Text
# get raw text
introText <- readLines('intro.txt') %>%
stringr::str_split(rawText,  pattern = '\\n') %>%
# wrap a paragraph tag around each element in the list
replacedText <- purrr::map(.f = p)
readLines('intro.txt') %>% View()
# Intro Text
# get raw text
introText <- readLines('intro.txt') %>%
stringr::str_split(rawText,  pattern = '\\n') %>% View()
introText <- readLines('intro.txt') %>%
stringr::str_split(rawText,  pattern = '\\n') %>%
# wrap a paragraph tag around each element in the list
purrr::map(.f = p)
print(introText)
# Intro Text
# get raw text
introText <- readLines('intro.txt') %>%
stringr::str_split(pattern = '\\n') %>%
# wrap a paragraph tag around each element in the list
purrr::map(.f = p)
print(introText)
runApp()
?tags
runApp()
?purrr::reduce
# Prepare introText in HTML Formatting.
introText <- readLines('intro.txt') %>%
stringr::str_split(pattern = '\\n') %>%
# wrap a paragraph tag around each element in the list
purrr::map(.f = p) %>%
purrr:reduce(.f = stringr::str_c)
# Prepare introText in HTML Formatting.
introText <- readLines('intro.txt') %>%
stringr::str_split(pattern = '\\n') %>%
# wrap a paragraph tag around each element in the list
purrr::map(.f = p) %>%
purrr::reduce(.f = stringr::str_c)
print(introText)
# Prepare introText in HTML Formatting.
introText <- readLines('intro.txt') %>%
stringr::str_split(pattern = '\\n') %>%
# wrap a paragraph tag around each element in the list
purrr::map(.f = p) %>%
purrr::reduce(.f = stringr::str_c, sep = " ")
print(introText)
runApp()
runApp()
?tags
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?link
?tags$link()
?tags$link
?tags
runApp()
runApp()
?shiny::img
runApp()
runApp()
runApp()
?column
runApp()
runApp()
runApp()
value = data.frame(Label = character(),
Start = character(),
End = character(),
stringsAsFactors=FALSE)
# Keep Track of Loaded Sensor Ingestion Parameters
value %>%
tibble::add_row(Label = pat$meta$label,
Start = input[["sensot_timespan"]][[1]],
End = input[["sensot_timespan"]][[2]]) %>%
print()
pat <- pat_list(site = "Anna Woodroof Apartment")[[1]]
pat <- load_pat_list(site = "Anna Woodroof Apartment")[[1]]
pat <- load_pat_list(site = "Anna Woodroof Apartment", path = "C://Users/iozeroff/Data-Science/ophealthyair")[[1]]
pat <- load_pat_list(site = "Anna Woodroof Apartment", path = "C://Users/iozeroff/Data-Science/ophealthyair/data/pat_list.rds")[[1]]
# Keep Track of Loaded Sensor Ingestion Parameters
value %>%
tibble::add_row(Label = 5,
Start = input[["sensot_timespan"]][[1]],
End = input[["sensot_timespan"]][[2]]) %>%
print()
?dateRangeInput
# Keep Track of Loaded Sensor Ingestion Parameters
value %>%
tibble::add_row(Label = "5",
Start = "6")
runApp()
runApp()
runApp()
runApp()
runApp()
source('C:/Users/iozeroff/Data-Science/ophealthyair/R/sensor_hourlyavg_aqicolorsPlot.R', encoding = 'UTF-8', echo=TRUE)
shiny::runApp()
install.packages("shinycssloaders")
shiny::runGitHub('daattali/shinycssloaders', subdir = "inst/examples/basic")
shiny::runGitHub('daattali/shinycssloaders', subdir = "inst/examples/basic", display.mode = "showcase")
library(shinycssloaders)
runApp()
install.packages("shinybusy")
library(shinybusy)
runApp()
runApp()
# Vulnerable to changes in Sensor_catalog.
meta_df <- sensor_list %>%
purrr::map(.f = sensor_extractData) %>%
openxlsx::addWorksheet(wb, sheetName = "Sensor Info")
sensor_list <- readRDS("C://Users/iozeroff/Data-Science/ophealthyair/data/sensor_list.rds")
sensor_list %>% sensor_extractMeta() %>% View()
sensor_list[[1]] %>% sensor_extractMeta() %>% View()
sensor_list[[1]]
View(sensor_list)
sensor_list[[1]][[1]] %>% sensor_extractMeta() %>% View()
?pat_createAirSensor
runApp()
pat_list <- readRDS("C://Users/iozeroff/Data-Science/ophealthyair/data/pat_list.rds")
pat_list[[1]] %>% pat_extractData() %>% View()
View(pat_list)
pat_list[[4]] %>% pat_extractData() %>% View()
aqi_info <- load_aqi_info()
View(aqi_info)
View(aqi_info)
?cut
View(aqi_info)
View(aqi_info)
aqi_info <- load_aqi_info(country = "U")
aqi_info <- load_aqi_info(country = "US")
# Create Sensor Objects for each Parameter
pm_data <- sensor_list %>%
purrr::map("pm25") %>%
purrr::map(.f = function(x) dplyr::rename(x$data, pm25 = 2))
# Subset AirSensors with Temp data.
temp_data <- sensor_list %>%
purrr::map("temperature") %>%
purrr::map(.f = function(x) rename(x$data, temperature = 2)) %>%
# Subset AirSensors with Humidity data.
humidity_data <- sensor_list %>%
purrr::map("humidity") %>%
purrr::map(.f = function(x) rename(x$data, humidity = 2))
# Subset AirSensors with Temp data.
temp_data <- sensor_list %>%
purrr::map("temperature") %>%
purrr::map(.f = function(x) rename(x$data, temperature = 2))
# Subset AirSensors with Humidity data.
humidity_data <- sensor_list %>%
purrr::map("humidity") %>%
purrr::map(.f = function(x) rename(x$data, humidity = 2))
dwnld_data <-
purrr::map2(.x = pm_data, .y = temp_data,
.f = left_join, by = "datetime") %>%
purrr::map2(.y = humidity_data,
.f = left_join, by ="datetime") %>%
bind_rows(.id = label)
dwnld_data <-
purrr::map2(.x = pm_data, .y = temp_data,
.f = left_join, by = "datetime") %>%
purrr::map2(.y = humidity_data,
.f = left_join, by ="datetime") %>%
bind_rows(.id = "sensor")
View(dwnld_data)
# Creates a joined time series of PM data for each sensor.
pm_joined <- pm_data %>%
purrr::reduce(full_join, by = "datetime") %>%
`colnames<-`(c("datetime", names(sensor_list))) %>%
dplyr::mutate_if(is.numeric, round, digits = 2)
View(pm_joined)
?selectInput
column_opts <- c(
"Particulate Matter 2.5" = "pm25",
"Temperature" = "temperature",
"Humidity" = "humidity",
"Day of the Week" = "weekday",
"AQI Category" = "aqi_category"
)
names(column_opts)
dwnld_data %>%
dplyr::mutate(
date = format(as.POSIXct(datetime, format="%Y-%m-%d %H:%M:%S"), "%Y-%m-%d"),
time = format(as.POSIXct(datetime, format="%Y-%m-%d %H:%M:%S"), "%H:%M:%S"),
day_of_week = weekdays(datetime),
# Fahrenheit to Celsius
temperature = (temperature - 32) * 5/9,
aqi_category = cut(pm25,
breaks = aqi_info$breaks_24,
labels = aqi_info$names)
) %>%
select(column_opts)
dwnld_data %>%
dplyr::mutate(
date = format(as.POSIXct(datetime, format="%Y-%m-%d %H:%M:%S"), "%Y-%m-%d"),
time = format(as.POSIXct(datetime, format="%Y-%m-%d %H:%M:%S"), "%H:%M:%S"),
weekday = weekdays(datetime),
# Fahrenheit to Celsius
temperature = (temperature - 32) * 5/9,
aqi_category = cut(pm25,
breaks = aqi_info$breaks_24,
labels = aqi_info$names)
) %>%
select(column_opts)
dwnld_data <-
purrr::map2(.x = pm_data, .y = temp_data,
.f = left_join, by = "datetime") %>%
purrr::map2(.y = humidity_data,
.f = left_join, by ="datetime") %>%
bind_rows(.id = "sensor") %>%
mutate(
date = format(as.POSIXct(datetime, format="%Y-%m-%d %H:%M:%S"), "%Y-%m-%d"),
time = format(as.POSIXct(datetime, format="%Y-%m-%d %H:%M:%S"), "%H:%M:%S"),
weekday = weekdays(datetime),
# Fahrenheit to Celsius
temperature = (temperature - 32) * 5/9,
aqi_category = cut(pm25,
breaks = aqi_info$breaks_24,
labels = aqi_info$names)
) %>%
select(column_opts)
View(dwnld_data)
View(sensor_list)
colnames(sensor_list[[1]][[1]])
colnames(sensor_list[[1]][[1]][["meta"]])
# Create Sensor Objects for each Parameter
pm_data <- sensor_list %>%
purrr::map("pm25") %>%
purrr::map(.f = function(x) dplyr::rename(x$data, pm25 = 2))
pm_data %>%
purrr::reduce(full_join, by = "datetime") %>%
`colnames<-`(c("datetime", names(sensor_list))) %>%
dplyr::mutate_if(is.numeric, round, digits = 2)
length(sensor_list)
View(sensor_list)
sensor_data <- sensor_list[[i]] %>%
purrr::reduce(full_join, by = "datetime") %>%
`colnames<-`(c("datetime", names(sensor_list[[i]]))) %>%
dplyr::mutate_if(is.numeric, round, digits = 2)
i = 1
sensor_data <- sensor_list[[i]] %>%
purrr::reduce(full_join, by = "datetime") %>%
`colnames<-`(c("datetime", names(sensor_list[[i]]))) %>%
dplyr::mutate_if(is.numeric, round, digits = 2)
sensor_data <- sensor_list[[i]] %>%
purrr::map(sensor_extractData) %>%
purrr::reduce(full_join, by = "datetime") %>%
`colnames<-`(c("datetime", names(sensor_list[[i]]))) %>%
dplyr::mutate_if(is.numeric, round, digits = 2)
View(sensor_data)
sensor_data <- sensor_list[[i]] %>%
purrr::map(sensor_extractData) %>%
purrr::reduce(full_join, by = "datetime") %>%
`colnames<-`(c("datetime", names(sensor_list[[i]]))) %>%
dplyr::mutate_if(is.numeric, round, digits = 2) %>%
mutate(
date = format(as.POSIXct(datetime, format="%Y-%m-%d %H:%M:%S"), "%Y-%m-%d"),
time = format(as.POSIXct(datetime, format="%Y-%m-%d %H:%M:%S"), "%H:%M:%S"),
weekday = weekdays(datetime),
# TODO: Add TEMP option
# Fahrenheit to Celsius
temperature = (temperature - 32) * 5/9,
aqi_category = cut(pm25,
breaks = aqi_info$breaks_24,
labels = aqi_info$names)
) %>%
select(column_opts)
View(sensor_data)
column_opts <- c(
"Date" = "date",
"Time" = "time",
"Particulate Matter 2.5" = "pm25",
"Temperature" = "temperature",
"Humidity" = "humidity",
"Day of the Week" = "weekday",
"AQI Category" = "aqi_category"
)
sensor_data <- sensor_list[[i]] %>%
purrr::map(sensor_extractData) %>%
purrr::reduce(full_join, by = "datetime") %>%
`colnames<-`(c("datetime", names(sensor_list[[i]]))) %>%
dplyr::mutate_if(is.numeric, round, digits = 2) %>%
mutate(
date = format(as.POSIXct(datetime, format="%Y-%m-%d %H:%M:%S"), "%Y-%m-%d"),
time = format(as.POSIXct(datetime, format="%Y-%m-%d %H:%M:%S"), "%H:%M:%S"),
weekday = weekdays(datetime),
# TODO: Add TEMP option
# Fahrenheit to Celsius
temperature = (temperature - 32) * 5/9,
aqi_category = cut(pm25,
breaks = aqi_info$breaks_24,
labels = aqi_info$names)
) %>%
select(column_opts)
View(sensor_data)
label <- names(sensor_list)[[i]]
sensor_sheets <- list()
sensor_sheets[[label]] <- sensor_data
View(sensor_sheets)
runApp()
test <- "I"
rep(test)
# Update MetaData
ingestion_meta_df(
ingest_meta_df()[["QAQC"]] <- rep(test, 2)
)
rep(test, 2)
rep(test, n = 2)
rep(test, times = 2)
View(sensor_data)
sensor_data[,"Date"]
View(pm_joined)
View(sensor_data)
sensor_data["AQI Category" == "Good", "Date"]
View(sensor_data)
sensor_data["AQI Category" == 1, "Date"]
sensor_data["AQI Category" == 2, "Date"]
source("C://Users/iozeroff/Data-Science/R-Projects/useful/model-equation.R")
model_equation(readRDS("data/calibration-models/imd-lodhi-road.rds"))
model_equation(readRDS("data/calibration-models/imd-lodhi-road.rds")[["model"]])
test_mod <- readRDS("data/calibration-models/imd-lodhi-road.rds")
test_mod <- readRDS("data/calibration-models/imd-lodhi-road.rds")[["model"]]
model_equation(test_mod)
model_equation(test_mod, round = 2)
test_mod$call
test_mod$call$formula
test_mod$coefficients
round(test_mod$coefficients, 2)
source('C:/Users/iozeroff/Data-Science/R-Projects/useful/model-equation.R', echo=TRUE)
model_equation(model = test_mod, signif_dig = 2)
source('C:/Users/iozeroff/Data-Science/R-Projects/useful/model-equation.R', echo=TRUE)
model_equation(model = test_mod, signif_dig = 2)
source('C:/Users/iozeroff/Data-Science/R-Projects/useful/model-equation.R', echo=TRUE)
model_equation(model = test_mod, digits = 2)
?renderText
?textOutput
?withMathJax
runApp()
runApp()
runApp()
# Make new sensor pm dataset.
sensor_list <- list(names(pat_list))
View(sensor_list)
runApp()
runApp()
runApp()
runApp()
runApp()
class(pat)
runApp()
View(pat_isPat)
View(pat_createAirSensor())
View(pat_createAirSensor)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(renderTable)
shiny::runApp()
methods(xtable)
runApp()
?xtable::xtable.data.frame
library(xtable)
methods(xtable)
runApp()
View(renderTable)
View(xtable)
runApp()
traceback()
source("server.r")
server()
runApp()
?renderTable
runApp()
ggthemr::ggthemr("fresh")
swatch()
ggthemr::swatch()
# Get better contrasting colors
to_swap <- swatch()[1, 9]
# Get better contrasting colors
to_swap <- ggthemr::swatch()[1, 9]
# Get better contrasting colors
to_swap <- ggthemr::swatch()[c(1, 9)]
runApp()
runApp()
